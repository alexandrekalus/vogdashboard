{% extends "layout.html" %}

{% block content %}
 
    <script src="https://cdn.jsdelivr.net/npm/leaflet"></script>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/leaflet/dist/leaflet.css" />
 <style>
        body {
            display: flex;
            margin: 0;
            font-family: Arial, sans-serif;
        }
        #map {
            width: 70%;
            height: 100vh;
        }
        #agent-listing {
            width: 30%;
            height: 100vh;
            padding: 10px;
            overflow-y: auto;
            background-color: #f8f9fa;
        }
        .agent {
            padding: 5px;
            margin: 5px 0;
            cursor: pointer;
            background-color: #e9ecef;
            border-radius: 5px;
        }
        .agent:hover {
            background-color: #007bff;
            color: white;
        }
        .agent.active {
            background-color: #0056b3;
            color: white;
        }
    </style>


<div id="map"></div>
<div id="agent-listing">
    <h3>Agents actifs (2024)</h3>
    <ul id="agent-list">
        <!-- La liste des agents sera insérée ici -->
    </ul>
</div>

<script>
    const map = L.map('map').setView([46.603354, 1.888334], 6);

    // Ajouter les tuiles OpenStreetMap
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
        maxZoom: 18,
    }).addTo(map);

    const departmentData = {{ department_data | safe }};
    const agentData = {{ agent_data | safe }};
    const departmentLayers = {};

    // Vérifiez les données
    console.log("Department Data:", departmentData);
    console.log("Agent Data:", agentData);

    // Création des départements avec popups et choropleth
    const choropleth = L.geoJSON(departmentData, {
        style: (feature) => {
            const pharmacies = feature.properties.nb_clients || 0;
            const fillColor = pharmacies > 150 ? '#800026' : 
                              pharmacies > 100 ? '#BD0026' : 
                              pharmacies > 50 ? '#E31A1C' : 
                              pharmacies > 10 ? '#FC4E2A' : 
                              pharmacies > 1 ? '#FD8D3C' : '#FFEDA0';
            return {
                fillColor: fillColor,
                weight: 2,
                color: 'white',
                fillOpacity: 0.7,
            };
        },
        onEachFeature: (feature, layer) => {
            const popupContent = `
                <b>Département :</b> ${feature.properties.nom}<br>
                <b>Agents :</b> ${feature.properties.nom_agents || 'Aucun'}<br>
                <b>Clients :</b> ${feature.properties.nb_clients || 0}<br>
                <b>Pharmacies totales :</b> ${feature.properties.nb_pharmacies || 0}<br>
                <b>Ratio clients/pharmacies :</b> ${feature.properties.ratio_clients_pharmacies || 0}
            `;
            layer.bindPopup(popupContent);
            departmentLayers[feature.properties.code] = layer;
        }
    }).addTo(map);

    // Génération de la liste des agents
    const agentList = document.getElementById('agent-list');
    const uniqueAgents = new Set();

    agentData.forEach(agent => {
        const agents = agent.nom.split(',').map(a => a.trim());
        agents.forEach(agentName => uniqueAgents.add(agentName));
    });

    [...uniqueAgents].sort().forEach(agentName => {
        const agentItem = document.createElement('li');
        agentItem.className = 'agent';
        agentItem.textContent = `- ${agentName}`; // Chaque agent sur une nouvelle ligne avec un tiret

        agentItem.addEventListener('mouseover', () => {
            const relevantDepartments = agentData
                .filter(agent => agent.nom.includes(agentName))
                .flatMap(agent => agent.departments);
            highlightDepartments(relevantDepartments, true);
        });

        agentItem.addEventListener('mouseout', () => {
            const relevantDepartments = agentData
                .filter(agent => agent.nom.includes(agentName))
                .flatMap(agent => agent.departments);
            highlightDepartments(relevantDepartments, false);
        });

        agentList.appendChild(agentItem);
    });

	function highlightDepartments(departments, highlight) {
		departments.forEach(dept => {
			const layer = departmentLayers[dept];
			if (layer) {
				const pharmacies = layer.feature.properties.nb_clients || 0;
				const originalFillColor = pharmacies > 150 ? '#800026' : 
										  pharmacies > 100 ? '#BD0026' : 
										  pharmacies > 50 ? '#E31A1C' : 
										  pharmacies > 10 ? '#FC4E2A' : 
										  pharmacies > 1 ? '#FD8D3C' : '#FFEDA0';

				layer.setStyle({
					fillColor: highlight ? '#007bff' : originalFillColor,
					fillOpacity: highlight ? 0.9 : 0.7,
				});
			}
		});
	}
</script>
{% endblock %}