from flask import render_template
import sqlite3

def product_details(app, db_name):
    @app.route('/product/<code_article>/details')
    def product_details_route(code_article):
        conn = sqlite3.connect(db_name)
        cursor = conn.cursor()

        # Récupérer les détails du produit
        query_product_details = """
            SELECT p.code_article, p.nom_produit, 
                   lp.poids, lp.nb_par_carton, lp.largeur_carton, 
                   lp.longueur_carton, lp.hauteur_carton, lp.poids_carton,
                   lp.delai_reapprovisionnement, lp.stock_securite
            FROM Produits p
            LEFT JOIN LogistiqueProduits lp ON p.code_article = lp.code_article
            WHERE p.code_article = ?
        """
        cursor.execute(query_product_details, (code_article,))
        product_details = cursor.fetchone()

        # Vérifiez si le produit existe
        if not product_details:
            return f"Produit avec le code {code_article} introuvable.", 404

        # Calculer le stock moyen
        query_received = """
            SELECT SUM(quantite) AS total_recu
            FROM Achats
            WHERE code_article = ?
        """
        cursor.execute(query_received, (code_article,))
        total_recu = cursor.fetchone()[0] or 0

        query_sold = """
            SELECT SUM(quantite_vendue) AS total_vendu
            FROM Ventes
            WHERE code_article = ?
        """
        cursor.execute(query_sold, (code_article,))
        total_vendu = cursor.fetchone()[0] or 0

        stock_moyen = total_recu - total_vendu

        # Calculer la quantité moyenne mensuelle vendue sur les 12 derniers mois
        query_avg_monthly_sales = """
            SELECT AVG(monthly_sales.total)
            FROM (
                SELECT SUM(v.quantite_vendue) AS total
                FROM Ventes v
                WHERE v.code_article = ? AND date(v.date_vente) >= date('now', '-12 months')
                GROUP BY strftime('%Y-%m', v.date_vente)
            ) AS monthly_sales
        """
        cursor.execute(query_avg_monthly_sales, (code_article,))
        avg_monthly_sales = cursor.fetchone()[0] or 0  # Quantité moyenne mensuelle vendue

        # Calculer la vente moyenne quotidienne
        avg_daily_sales = avg_monthly_sales / 30

        # Récupérer le délai de réapprovisionnement et le stock de sécurité initial
        delai_reapprovisionnement = product_details[8] or 0  # Position 8 : delai_reapprovisionnement
        stock_securite_initial = product_details[9] or 0  # Position 9 : stock_securite

        # Calculer le stock de sécurité total
        stock_securite_total = round(avg_daily_sales * delai_reapprovisionnement + avg_monthly_sales, 2)

        # Récupérer les données mensuelles des ventes
        query_monthly_data = """
            SELECT strftime('%Y-%m', date_vente) AS mois,
                   SUM(quantite_vendue) AS total_vendu
            FROM Ventes
            WHERE code_article = ?
            GROUP BY mois
            ORDER BY mois ASC
        """
        cursor.execute(query_monthly_data, (code_article,))
        ventes_mensuelles = cursor.fetchall()

        # Récupérer les données mensuelles des achats
        query_stock_monthly_data = """
            SELECT strftime('%Y-%m', date_document) AS mois,
                   SUM(quantite) AS total_stock
            FROM Achats
            WHERE code_article = ? AND code_document = 16
            GROUP BY mois
            ORDER BY mois ASC
        """
        cursor.execute(query_stock_monthly_data, (code_article,))
        stocks_mensuels = cursor.fetchall()

        conn.close()

        # Structurer les données pour le graphique
        mois_labels = sorted({row[0] for row in ventes_mensuelles} | {row[0] for row in stocks_mensuels})
        ventes_dict = {row[0]: row[1] for row in ventes_mensuelles}
        stocks_dict = {row[0]: row[1] for row in stocks_mensuels}
        data_ventes = [ventes_dict.get(mois, 0) for mois in mois_labels]
        data_stocks = [stocks_dict.get(mois, 0) for mois in mois_labels]

        return render_template('product_details.html',
                               product={
                                   'code_article': product_details[0],
                                   'nom_produit': product_details[1],
                                   'poids': product_details[2],
                                   'nb_par_carton': product_details[3],
                                   'largeur_carton': product_details[4],
                                   'longueur_carton': product_details[5],
                                   'hauteur_carton': product_details[6],
                                   'poids_carton': product_details[7],
                                   'delai_reapprovisionnement': delai_reapprovisionnement,
                                   'stock_securite_initial': stock_securite_initial,
                                   'stock_moyen': stock_moyen,
                                   'avg_monthly_sales': round(avg_monthly_sales, 2),
                                   'avg_daily_sales': round(avg_daily_sales, 2),
                                   'stock_securite_total': stock_securite_total
                               },
                               chart_data={
                                   'labels': mois_labels,
                                   'ventes': data_ventes,
                                   'stocks': data_stocks
                               })
